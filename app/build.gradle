apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def localProperties = getProperties("local.properties")

project.ext {
    androidSource = '27.1.1'
    playServices = '15.0.0'
    rxjava2 = '2.1.7'
    rxandroid = '2.0.2'
    rxkotlin = '2.2.0'
    retrofit = '2.3.0'
    retrofitGsonConverter = '2.1.0'
    retrofitRxAdapter = '2.2.0'
    httpLogger = '3.9.1'
    toothpick = '1.1.3'
    archLifecycle = '1.1.1'
    archPersistence = '1.0.0'
    autodispose = '0.6.0'
    timber = '4.6.1'
    rxPermissions = '0.9.5@aar'
    butterknife = '8.8.1'
    glide = '4.5.0'
}

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.frlgrd.sun"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "google_api_key", localProperties['google_play_services_key.debug']
        }
        debug {
            resValue "string", "google_api_key", localProperties['google_play_services_key.debug']
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
}

dependencies {
    // Base dependencies
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$project.kotlin_version"
    implementation "com.android.support:appcompat-v7:$androidSource"
    implementation "com.android.support:design:$androidSource"

    // Architecture components
    implementation "android.arch.lifecycle:extensions:$archLifecycle"
    implementation "android.arch.lifecycle:reactivestreams:$archLifecycle"
    implementation "android.arch.persistence.room:runtime:$archPersistence"
    kapt "android.arch.persistence.room:compiler:$archPersistence"

    // Toothpick
    implementation "com.github.stephanenicolas.toothpick:toothpick-runtime:$toothpick"
    implementation "com.github.stephanenicolas.toothpick:smoothie:$toothpick"
    kapt "com.github.stephanenicolas.toothpick:toothpick-compiler:$toothpick"

    // Rx
    implementation "io.reactivex.rxjava2:rxjava:$rxjava2"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxkotlin"
    implementation "com.uber.autodispose:autodispose-kotlin:$autodispose"
    implementation "com.uber.autodispose:autodispose-android-kotlin:$autodispose"
    implementation "com.uber.autodispose:autodispose-android-archcomponents-kotlin:$autodispose"
    implementation "com.tbruyelle.rxpermissions2:rxpermissions:$rxPermissions"

    // Network
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitGsonConverter"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitRxAdapter"
    implementation "com.squareup.okhttp3:logging-interceptor:$httpLogger"

    //UI
    implementation "com.jakewharton:butterknife:$butterknife"
    kapt "com.jakewharton:butterknife-compiler:$butterknife"
    implementation "com.github.bumptech.glide:glide:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"

    // Google API
    implementation "com.google.android.gms:play-services-awareness:$playServices"
    // Logging
    implementation "com.jakewharton.timber:timber:$timber"
}

private Properties getProperties(String path) {
    def propertiesFile = rootProject.file(path)
    def properties = new Properties()
    properties.load(new FileInputStream(propertiesFile))
    return properties
}
